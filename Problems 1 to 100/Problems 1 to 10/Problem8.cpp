#include <iostream>
#include <iomanip>
#include <chrono>
#include <cmath>
#include <cassert>
#include <cstdlib>
#include <map>
#include <fstream>
#include <sstream>

using namespace std;
using namespace chrono;


struct Problem8 {

	string s = "\
		73167176531330624919225119674426574742355349194934\
		96983520312774506326239578318016984801869478851843\
		85861560789112949495459501737958331952853208805511\
		12540698747158523863050715693290963295227443043557\
		66896648950445244523161731856403098711121722383113\
		62229893423380308135336276614282806444486645238749\
		30358907296290491560440772390713810515859307960866\
		70172427121883998797908792274921901699720888093776\
		65727333001053367881220235421809751254540594752243\
		52584907711670556013604839586446706324415722155397\
		53697817977846174064955149290862569321978468622482\
		83972241375657056057490261407972968652414535100474\
		82166370484403199890008895243450658541227588666881\
		16427171479924442928230863465674813919123162824586\
		17866458359124566529476545682848912883142607690042\
		24219022671055626321111109370544217506941658960408\
		07198403850962455444362981230987879927244284909188\
		84580156166097919133875499200524063689912560717606\
		05886116467109405077541002256983155200055935729725\
		71636269561882670428252483600823257530420752963450\
	";

	auto solve() {
		const int L = 1000, K = 13;
		long long a[L], p[L], q[L], mx;
		int x = 0;
		for (int i = 0; i < s.size(); ++i) {
			if (s[i] >= '0' && s[i] <= '9') {
				a[x] = s[i] - '0';
				++x;
			}

		}
		p[0] = 1;
		for (int i = 0; i < K; ++i) {
			p[0] *= a[i];
		}
		mx = p[0];
		q[0] = p[0];
		for (int i = 1; i < L - K + 1; ++i) {
			if (a[i - 1] != 0) {
				p[i] = p[i - 1] * a[i + K - 1] / a[i - 1];
			} else  {
				p[i] = q[i - 1] * a[i + K - 1];
			}
			q[i] = q[i - 1];
			if (a[i + K - 1] != 0) {
				q[i] *= a[i + K - 1];
			}
			if (a[i - 1] != 0) {
				q[i] /= a[i - 1];
			}
			mx = max(p[i], mx);
		}
		return mx;
	}


} solver;


int main() {
	freopen("output.txt", "w+", stdout);
	auto start = high_resolution_clock::now();
	auto ans = solver.solve();
	auto end = high_resolution_clock::now();
	duration <double> diff = end - start;
	cout << setw(12) << " Answer: " << setw(10) << ans;
	cout << "\n Time taken: " << setw(9) << fixed;
	cout << setprecision(5) << diff.count() << "s\n\n";
	return 0;
}

/**********************
    Answer: 23514624000
 Time taken:   0.00000s
***********************/
